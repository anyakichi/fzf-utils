#!/bin/bash

set -o pipefail

# shellcheck source=./_fzf-state
. "${0%/*}/_fzf-state"

do_find() {
    local opts
    opts=()

    if [[ $1 == "d" ]]; then
        opts+=(-type d -printf "%p/\n")
    elif [[ $1 == "f" ]]; then
        opts+=(-type f -print -o -type l -print)
    else
        opts+=(-type d -printf "%p/\n" -o -type f -print -o -type l -print)
    fi

    if (($2 > 0)); then
        opts+=(-maxdepth "$2")
    fi

    find -L "${3:-.}" -mindepth 1 -xdev -path '*/\.*' -prune -o "${opts[@]}" 2>/dev/null |
        cut -b3-
}

do_fd() {
    local opts
    opts=()

    if [[ $1 == "d" ]]; then
        opts+=(--type d)
    elif [[ $1 == "f" ]]; then
        opts+=(--type f --type l)
    fi

    if (($2 > 0)); then
        opts+=(-d "$2")
    fi

    fd -L --one-file-system --color=always "${opts[@]}" "${S[ignore]}" \
        --search-path "${3:-.}" 2>/dev/null
}

CMD="$1"
shift

case "$CMD" in
list)
    if command -v fd >/dev/null 2>&1; then
        do_fd "${S[type]}" "${S[depth]}" "${S[path]}"
    else
        do_find "${S[type]}" "${S[depth]}" "${S[path]}"
    fi
    ;;
view)
    export LESS=-KMRc

    if [[ -f $1 ]]; then
        if command -v bat &>/dev/null; then
            bat --plain --color=always --paging=always "$1"
        else
            less "$1"
        fi
    else
        [[ -d $1 ]]
        if command -v exa &>/dev/null; then
            exa -T -L3 --color=always "$1" | less
        else
            /bin/ls --color "$1" | less
        fi
    fi
    ;;
run)
    fzf_args=()
    while ((${#@} > 0)); do
        if [[ $1 == "--" ]]; then
            shift
            break
        fi
        fzf_args+=("$1")
        shift
    done

    S[type]=a
    S[depth]=0
    if [[ ${#@} != 0 ]]; then
        [[ $1 ]] && S[type]=$1
        [[ $2 ]] && S[depth]=$2
    fi

    "$0" list |
        fzf --ansi -m \
            --header ":: C-r: toggle depth; C-d: go parent; C-s: reset parent; C-x: cycle type; C-v: cycle ignore" \
            --bind "ctrl-d:reload('$0' go-parent && '$0' list)" \
            --bind "ctrl-r:reload('$0' toggle-depth && '$0' list)" \
            --bind "ctrl-s:reload('$0' reset-parent && '$0' list)" \
            --bind "ctrl-t:execute(tview '$0' view {})" \
            --bind "ctrl-v:reload('$0' cycle-ignore && '$0' list)" \
            --bind "ctrl-x:reload('$0' cycle-type && '$0' list)" \
            --preview "'$0' view {} | head -500" \
            --preview-window hidden \
            "${fzf_args[@]}"
    ;;
cycle-ignore)
    if [[ ${S[ignore]} == "" ]]; then
        S[ignore]=-u
    elif [[ ${S[ignore]} == "-u" ]]; then
        S[ignore]=-uu
    else
        S[ignore]=
    fi
    ;;
cycle-type)
    if [[ ${S[type]} == "a" ]]; then
        S[type]=d
    elif [[ ${S[type]} == "d" ]]; then
        S[type]=f
    else
        S[type]=a
    fi
    ;;
toggle-depth)
    if ((S[depth] > 0)); then
        S[depth]=0
    else
        S[depth]=1
    fi
    ;;
go-parent)
    if [[ ${S[path]} ]]; then
        S[path]+="/.."
    else
        S[path]=".."
    fi
    ;;
reset-parent)
    S[path]=""
    ;;
esac
